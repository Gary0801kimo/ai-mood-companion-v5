
const fetch = require("node-fetch");

const systemPrompts = {
  zh: "‰Ω†ÊòØ‰∏Ä‰ΩçÊ∫´ÊüîÁôÇÁôíÁ≥ªÁöÑ AI ÂøÉÈùàÂ•ΩÂèã„Äåüå§Ô∏è„ÄçÔºåË´ãÊ†πÊìö‰ΩøÁî®ËÄÖÁöÑÊÉÖÁ∑íÂÖßÂÆπÔºåÁµ¶Âá∫Ê∫´ÊöñÁöÑÂõûÊáâËàáÂÖ∑È´îÂª∫Ë≠∞ÔºåÈÅøÂÖçÂà∂ÂºèÂè•„ÄÇÁµêÂ∞æÈôÑ‰∏ä‰∏ÄÂè•È¢®Ê†º‰∏ÄËá¥ÁöÑÁôÇÁôíÈáëÂè•„ÄÇËã•ÂÖßÂÆπÊúâÊÜÇÈ¨±ÂÇæÂêëÔºåË´ãÂÖßÈÉ®Ë©ï‰º∞È¢®Èö™Ôºå‰∏¶ÊüîÊÄßÊèêÈÜí‰ΩøÁî®ËÄÖÔºå‰ΩÜ‰∏çË¶ÅËÆìÂ∞çË©±È°ØÂæóÂö¥ËÇÖÊàñÂöá‰∫∫„ÄÇ",
  en: "You are a gentle, therapeutic AI friend named 'üå§Ô∏è'. Based on the user's emotional message, reply warmly and naturally with practical support. Include a healing quote. If you sense depressive tendencies, gently offer support without sounding alarming.",
  ja: "„ÅÇ„Å™„Åü„ÅØÁôí„ÅóÁ≥ªAI„ÅÆ„Äåüå§Ô∏è„Äç„Åß„Åô„ÄÇ„É¶„Éº„Ç∂„Éº„ÅÆÊÑüÊÉÖ„Å´ÂØÑ„ÇäÊ∑ª„ÅÑ„ÄÅÂÑ™„Åó„ÅèËá™ÁÑ∂„Å™Ë®ÄËëâ„ÅßÂä±„Åæ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÊúÄÂæå„Å´Áôí„Åó„ÅÆ‰∏ÄË®Ä„ÇÇÊ∑ª„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÈ¨±„ÅÆÂÇæÂêë„Åå„ÅÇ„Çå„Å∞„ÄÅ„ÇÑ„Åï„Åó„Åè„Åù„Å£„Å®ÂØÑ„ÇäÊ∑ª„Å£„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ",
  th: "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô AI ‡∏ó‡∏µ‡πà‡πÉ‡∏à‡∏î‡∏µ‡πÅ‡∏•‡∏∞‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô 'üå§Ô∏è' ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à ‡∏õ‡∏¥‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏Ñ‡∏°‡πÄ‡∏¢‡∏µ‡∏¢‡∏ß‡∏¢‡∏≤‡∏´‡∏±‡∏ß‡πÉ‡∏à ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤ ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏¢‡∏ô",
  fil: "Ikaw ay isang maaasahang AI na kaibigan na may pangalan 'üå§Ô∏è'. Magbigay ng payo na may malasakit at tapusin ng isang healing na quote. Kung may nakikitang lungkot, hikayatin siya sa mahinahong paraan.",
  id: "Kamu adalah AI sahabat penyemangat bernama 'üå§Ô∏è'. Balas dengan dukungan hangat dan positif. Sertakan kutipan penyemangat. Jika ada tanda-tanda depresi, beri dukungan dengan lembut."
};

exports.handler = async function (event, context) {
  const OPENAI_API_KEY = process.env.VITE_OPENAI_API_KEY;
  try {
    const body = JSON.parse(event.body || "{}");
    const userMessage = body.message || "";
    const lang = body.lang || "zh";
    const systemPrompt = systemPrompts[lang] || systemPrompts["zh"];

    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${OPENAI_API_KEY}`,
      },
      body: JSON.stringify({
        model: "gpt-3.5-turbo",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: userMessage },
        ],
      }),
    });

    const result = await response.json();
    const content = result.choices?.[0]?.message?.content || "ÔºàAI ÂõûË¶ÜÂ§±ÊïóÔºâ";

    let risk = "low";
    if (userMessage.match(/(ÊÉ≥Ê≠ª|ÁóõËã¶|Ê≤í‰∫∫ÊÑõ|ÁµïÊúõ|Â¥©ÊΩ∞|‰∏çÊÉ≥Ê¥ª|Ëá™ÊÆ∫|ÈªëÊöó)/)) {
      risk = "high";
    }

    const lines = content.split("\n").filter((l) => l.trim());
    const reply = lines.slice(0, lines.length - 1).join("\n").trim();
    const quote = lines[lines.length - 1]?.replace(/["„Äå„Äç]/g, "").trim();

    return {
      statusCode: 200,
      body: JSON.stringify({ reply, quote, risk }),
    };
  } catch (err) {
    console.error("GPT FETCH ERROR", err);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "gpt fetch failed", details: err.message }),
    };
  }
};
